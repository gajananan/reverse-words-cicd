apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ishield-artifact-signing-task
spec:
  inputs:
    resources:
    - name: cicd-git
      type: git
    params:
    - name: source-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: dest-branch
      type: string
      description: Branch for stage-plus environment on the git repository
    - name: signer-email
      type: string 
      description:  email of the artifacts signer 
    - name: git-repo-url
      type: string
      description:  git repo url "e.g. https://github.com/gajananan/logdna"
    - name: git-repo-user-email
      type: string
    - name: git-repo-user-name
      type: string
    - name: ignore-attrs
      type: string 
    - name: signer-pubkey-secret
      type: string
    - name: image-registry
      type: string
    - name: new-image-url
      type: string
  volumes:
    - name: secring-secret-volume
      secret:
        secretName: pipeline-keyring-secret
    - name: prestage
      emptyDir: {}
  steps:
    - name: clone-staging-release
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      workingdir: /workspace/cicd-git
      env:
        - name: IBMCLOUD_AUTH_TOKEN
          valueFrom:
             secretKeyRef:
               name: ibmcloud-token-secret
               key: token
        - name: NEW_IMAGE_URL
          value: $(inputs.params.new-image-url)
      script: |
        #!/bin/bash 
        mergedrscfile="merged.yaml"
        rspfile="rsp.yaml"
        copyrspfile="copy-rsp.yaml"
        rsfile="rs.yaml"
        image_policy="image_policy.yaml"

        echo ""
        echo "---------------------------------------------------------"
        echo "Configure Git Repo"
        git config --global credential.helper store
        git config --global user.email $(inputs.params.git-repo-user-email)
        git config --global user.name $(inputs.params.git-repo-user-name)
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git config --get remote.origin.fetch

        echo ""
        echo "---------------------------------------------------------"
        echo "Checkout artifacts $(inputs.params.source-branch) branch"
        git fetch
        git checkout $(inputs.params.source-branch)
        git pull origin $(inputs.params.source-branch)
        echo ""
        echo "---------------------------------------------------------"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        echo done

        IMAGE_URL="https://us.icr.io/api/v1/images/${NEW_IMAGE_URL}/json"
        TOKEN=$(echo ${IBMCLOUD_AUTH_TOKEN} | cut -d':' -f2)
        image_digest=$(curl -X GET   -H "accept: application/json"  \
                             -H "Account: e97a8c01ac694e308ef3ad7795e2f769" \
                             -H "Authorization: Bearer ${TOKEN}" \
                             --url ${IMAGE_URL} | jq -c '.Id')

        echo image_digest: $image_digest

        SHA_IMAGE_URL=$(echo ${NEW_IMAGE_URL} | cut -d':' -f1):$image_digest"
        if [ ! -z  image_digest_json ]; then
           yq w -i deployment.yaml 'spec.template.spec.containers[0].image' "$SHA_IMAGE_URL"
        fi

        echo ""
        echo "---------------------------------------------------------"
        echo "Check updated image name"
        cat deployment.yaml | yq r - -j | jq -r '.spec.template.spec.containers' | jq -r '.[].image'
        echo ""
        echo done


        echo ""
        echo "---------------------------------------------------------"
        echo "Compose using kustomize from $(inputs.params.source-branch)"
        kustomize build  > $mergedrscfile
        echo ""
        echo "Content of $mergedrscfile"
        cat $mergedrscfile
        echo ""
        echo "done"

        git checkout deployment.yaml

        echo ""
        echo "---------------------------------------------------------"
        echo "Create $(inputs.params.dest-branch) or checkout artifacts $(inputs.params.dest-branch) branch"
        dest_branch_exist=$(git ls-remote origin $(inputs.params.dest-branch))
        if [ -z $dest_branch_exist ]; then
           git checkout -b $(inputs.params.dest-branch)
        else
           git checkout $(inputs.params.dest-branch)
        fi
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Before Check content of kustomization.yaml"
        cat kustomization.yaml
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Remove IShield resources from  kustomization.yaml "
        yq d -i kustomization.yaml "resources.[$rspfile]"
        yq d -i kustomization.yaml "resources.[$rsfile]"
        yq d -i kustomization.yaml "resources.[$image_policy]"
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "After Check content of kustomization.yaml"
        cat kustomization.yaml
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Commit changes to kustomization.yaml"
        git add kustomization.yaml
        git commit -m "removed IShield resources from kustomization.yaml"
        echo ""
        echo done
        
        echo ""
        echo "---------------------------------------------------------"
        echo "Git merge from $(inputs.params.source-branch) to $(inputs.params.dest-branch)"
        git merge $(inputs.params.source-branch)
        git checkout --theirs deployment.yaml
        echo ""
        echo "---------------------------------------------------------"
        echo "Check Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        echo done
        
        echo ""
        echo "---------------------------------------------------------"
        echo "Add argocd wave annotation"
        cat namespace.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-4"' | yq r - --prettyPrint >> copy-namespace.yaml
        mv copy-namespace.yaml namespace.yaml
        cat namespace.yaml
        echo done               

        echo ""
        echo "---------------------------------------------------------"
        echo "Remove previous IShield resources"
        if [ -f $rspfile ]; then
           rm $rspfile
        fi
        if [ -f $rsfile ]; then
           rm $rsfile
        fi 
        if [ -f $image_policy ]; then
           rm $image_policy
        fi
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Generate RSP <script> <inputfile> <IGNORE_ATTR>"
        echo ignore-attrs: $(inputs.params.ignore-attrs)
        /generate_rsp.sh $mergedrscfile $rspfile $(inputs.params.ignore-attrs) true
        echo ""
        echo done
        echo ""
        echo "---------------------------------------------------------"
        echo "Check generated RSP"
        cat  $rspfile
        echo "---------------------------------------------------------" 
        echo "done"  

        echo ""
        echo "Set argocd wave annotation for $rspfile"
        echo "---------------------------------------------------------"
        cat $rspfile | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-3"' | yq r - --prettyPrint >> $copyrspfile
        mv $copyrspfile $rspfile
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of kustomization.yaml"
        rspfileexist=$(cat kustomization.yaml | yq r - "resources(.==$rspfile)")
        if [ -z $rspfileexist ]; then
           yq w -i  kustomization.yaml 'resources.[+]' "$rspfile"
        fi
        cat  kustomization.yaml
        echo ""
        echo done

    - name: sign-artifacts
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /secrets/
          name: secring-secret-volume
      workingdir: /workspace/cicd-git
      env:
         - name: SIGNER_PUBKEY_SECRET
           value: $(inputs.params.signer-pubkey-secret)
         - name: IMAGE_REGISTRY
           value: $(inputs.params.image-registry)
      script: |
        #!/bin/bash

        mergedrscfile="merged.yaml"
        mergedrsigrscfile="rsig-merged.yaml"
        rsfile="rs.yaml"
        copyrsfile="copy-rs.yaml"
        echo ""
        echo "---------------------------------------------------------"
        echo "Retrive keyring-secret"       
        cat /secrets/secring.gpg > /tmp/tmp-secring.gpg
        echo "---------------------------------------------------------"
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Prepare GPG keys"
        echo ""
        echo "Import keys"
        gpg --import /tmp/tmp-secring.gpg

        echo ""
        echo "List secret keys"
        gpg --list-secret-keys

        echo ""
        echo "List keys"
        gpg --list-keys

        echo "---------------------------------------------------------"
        echo done
        
        echo ""
        echo "---------------------------------------------------------"        
        echo "Signer"
        signer=$(inputs.params.signer-email)
        echo "signer: $signer"
        echo ""
        echo done
  
        echo ""
        echo "---------------------------------------------------------"
        if [ -f  $mergedrscfile ]; then
           echo ""
           echo "Content of $mergedrscfile"
           cat $mergedrscfile
           echo ""
           echo "Generate ResourceSignature"
           /gpg-rs-sign.sh $signer $mergedrscfile $mergedrsigrscfile
        else
           echo could not find  $mergedrscfile !
           exit 1
        fi
        echo ""
        echo done

        if [ -f $mergedrsigrscfile ]; then
           echo ""
           echo "Content of $mergedrsigrscfile"
           cat $mergedrsigrscfile
           echo ""
           /generate-combined.rs.sh $mergedrscfile $mergedrsigrscfile $rsfile
           echo ""
        else
           echo could not find $mergedrsigrscfile
           exit 1
        fi
      
        #cat $rsfile | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-2"' | yq r - --prettyPrint >> $copyrsfile
        #mv $copyrsfile $rsfile
        yq w -i -d'*' $rsfile 'metadata.annotations."argocd.argoproj.io/sync-wave"' -- "lsstr -2"
        # dont use the folllowing
        #yq w -i -d'*' $rsfile 'metadata.annotations."argocd.argoproj.io/sync-wave"' -- "-2"
    
        echo ""
        echo "---------------------------------------------------------"
        echo "Content of kustomization.yaml"
        rsfileexist=$(cat kustomization.yaml | yq r - "resources(.==$rsfile)")
        if [ -z $rsfileexist ]; then
           yq w -i  kustomization.yaml 'resources.[+]' "$rsfile"
        fi
        cat  kustomization.yaml
        echo ""
        echo done
 
        echo ""
        echo "Remove temp files"
        if [ -f $mergedrscfile ]; then
           rm $mergedrscfile
        fi
        if [ -f $mergedrsigrscfile ]; then
           rm $mergedrsigrscfile
        fi
         
        if [ -f temp-aaa.yaml ]; then 
           rm temp-aaa.yaml
        fi
        if [ -f temp-rsig.yaml ]; then
           rm temp-rsig.yaml
        fi

        rm tmp-*

        #/generate_image_policy.sh "image-policy" ${SIGNER_PUBKEY_SECRET}  ${IMAGE_REGISTRY} image_policy.yaml"
        echo signer-pubkey-secret $(inputs.params.signer-pubkey-secret) 
        echo image-registry: $(inputs.params.image-registry)
        /generate_image_policy.sh "image-policy" $(inputs.params.signer-pubkey-secret) $(inputs.params.image-registry) "image_policy.yaml"
        image_policy="image_policy.yaml"

        if [ -f $image_policy ]; then
           yq w -i -d'*' $image_policy 'metadata.annotations."argocd.argoproj.io/sync-wave"' -- "lsstr -2"
           echo ""
           echo "---------------------------------------------------------"
           echo "Content of kustomization.yaml"
           image_policye_exist=$(cat kustomization.yaml | yq r - "resources(.==$image_policy)")
           if [ -z $image_policye_exist ]; then
             yq w -i  kustomization.yaml 'resources.[+]' "$image_policy"
           fi
           cat  kustomization.yaml
           echo ""
           echo done
        fi
    - name: push-generated-resources
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      workingdir: /workspace/cicd-git
      script: |
        #!/bin/bash
        rspfile="rsp.yaml"
        rsfile="rs.yaml"

        echo "Configure Git Repo"
        pwd
        ls

        git config --global credential.helper store
        git config --global user.email $(inputs.params.git-repo-user-email)
        git config --global user.name $(inputs.params.git-repo-user-name)
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git config --get remote.origin.fetch

        repourl=$(inputs.params.git-repo-url)
        echo repourl: $repourl
        repourlwithtoken=$(echo $repourl | sed "s|github|$AUTH_TOKEN@github|g").git
        git remote set-url origin  "$repourlwithtoken"
        git fetch

        echo ""
        echo "---------------------------------------------------------"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        git status
        echo ""
        echo done

        IMAGE_URL="https://us.icr.io/api/v1/images/${NEW_IMAGE_URL}/json"
        TOKEN=$(echo ${IBMCLOUD_AUTH_TOKEN} | cut -d':' -f2)
        image_digest_res=$(curl -X GET   -H "accept: application/json"  \
                             -H "Account: e97a8c01ac694e308ef3ad7795e2f769" \
                             -H "Authorization: Bearer ${TOKEN}" \
                             --url ${IMAGE_URL})

        echo image_digest_res: $image_digest_res
        image_digest=$(echo $image_digest_res | jq -c '.Id')
       
        echo image_digest: $image_digest

        SHA_IMAGE_URL=$(echo ${NEW_IMAGE_URL} | cut -d':' -f1):$image_digest"
        if [ ! -z  image_digest_json ]; then
           yq w -i deployment.yaml 'spec.template.spec.containers[0].image' "$SHA_IMAGE_URL"
        fi
         
        echo ""
        echo "---------------------------------------------------------"
        echo "Content of deployment.yaml"
        cat deployment.yaml
        echo done
        echo ""
        echo ""
        echo "---------------------------------------------------------" 
        echo "Push the generated resource to $(inputs.params.dest-branch) branch"
        git add namespace.yaml
        git add kustomization.yaml
        git add deployment.yaml
        git add image_policy.yaml
        git add $rspfile
        git add $rsfile

        git commit -m "Add generated resource protection profile and resources signature"
        #git push origin $(git rev-parse --abbrev-ref HEAD) &> /dev/null
        git push origin $(inputs.params.dest-branch)
        echo "done"
 
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: image-updater-secret
              key: token
        - name: IBMCLOUD_AUTH_TOKEN
          valueFrom:
             secretKeyRef:
               name: ibmcloud-token-secret
               key: token
        - name: NEW_IMAGE_URL
          value: $(inputs.params.new-image-url)
