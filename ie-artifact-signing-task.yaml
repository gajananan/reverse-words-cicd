apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ie-artifact-signing-task
spec:
  inputs:
    resources:
    - name: cicd
      type: git
    params:
    - name: pre-stage-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: signer-email
      type: string 
      description:  email of the artifacts signer 
  volumes:
    - name: kubeconfig-secret-volume
      secret:
        secretName: ie-kubeconfig-secret
    - name: secring-secret-volume
      secret:
        secretName: pipeline-keyring-secret
  steps:
    - name: clone-staging-release
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash

        echo ""
        echo "---------------------------------------------------------"
        echo "Checkout cicd pre-stage branch"  
        git fetch &> /dev/null
        git checkout "$(params.pre-stage-branch)" &> /dev/null
        pwd
        ls
        echo done
  
        #echo ""
        echo "---------------------------------------------------------"  
        echo "Adding argocd wave annotation"        
        echo "Before"
        cat kustomization.yaml
        echo ""
        yq d -i kustomization.yaml 'resources.[rsig-rpp-merged.yaml]'
        yq d -i kustomization.yaml 'resources.[rsig-merged.yaml]'
        yq d -i kustomization.yaml 'resources.[rpp-merged.yaml]'
        echo ""
        echo "After"
        cat kustomization.yaml
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Add label to namespace"
        yq w -i namespace.yaml 'metadata.labels.integrity-enforced' --tag '!!str' true
        echo ""
        echo "Adding argocd wave"
        cat namespace.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-4"' | yq r - --prettyPrint >> copy-namespace.yaml
        cp copy-namespace.yaml namespace.yaml
        cat namespace.yaml
        echo done 
               
        echo ""
        echo "---------------------------------------------------------"
        echo "Compose using kustomize"
        kustomize build  > merged.yaml
        echo "Content of merged.yaml"
        cat merged.yaml
        echo ".........................................................."
        echo "done"
        
        echo ""
        echo "---------------------------------------------------------"
        echo "removing old rpp"
        if [ -f rpp-merged.yaml ]; then
           rm rpp-merged.yaml
        fi
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Generating RPP"
        /generate_rpp.sh merged.yaml

        echo "" 
        cat rpp-merged.yaml
        echo "---------------------------------------------------------" 
        echo "done"  

    - name: sign-artifacts
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /config/
          name: kubeconfig-secret-volume
        - mountPath: /secrets/
          name: secring-secret-volume
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash
        
        
        echo ""
        echo "---------------------------------------------------------"
        echo "Retriving keyring-secret ..."
        
        cat /secrets/secring.gpg > /tmp/tmp-secring.gpg

        echo ""
        echo "---------------------------------------------------------"
        echo "importing keys"
        gpg --import /tmp/tmp-secring.gpg         

        echo ""
        echo "Listing secret keys"
        gpg --list-secret-keys

        echo ""
        echo "Listing keys"
        gpg --list-keys

        
        signer=$(params.signer-email)
        echo signer: $signer

        base='base64 -w 0'
        tmprsig='{"apiVersion":"research.ibm.com/v1alpha1","kind":"ResourceSignature","metadata":{"annotations":{"messageScope":"spec","signature":""},"name":""},"spec":{"data":[{"message":"","signature":"","type":"resource"}]}}'
 
        echo "" 
        echo "---------------------------------------------------------"
        echo "Generating signature for rpp"
        rppfilename="rpp-merged.yaml"
        rppfile=$(find . -name "$rppfilename")
        echo "rppfile": $rppfile
        rppmsg=`cat $rppfile | $base`
        echo "rppmsg"
        echo $rppmsg
        echo ""

        rppfilebasename=$(basename -- "$rppfile")
        echo "rsfilebasename: $rppfilebasename"

        rsigrppfile="rsig-$rppfilebasename"
  
        
        if [ -f $rsigrppfile ]; then
           rm $rsigrppfile
        fi
        echo -e $tmprsig | yq r - --prettyPrint >> $rsigrppfile
        
        rppsignfile="$rppfilebasename.sign"
        rppsignature=$( gpg -u $signer --detach-sign --armor --output - $rppfile | $base )
        echo rppsignature: $rppsignature
        echo $rppsignature >> $rppsignfile
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Setting up rsig for rpp"
        yq w -i $rsigrppfile spec.data.[0].message $rppmsg
        yq w -i $rsigrppfile spec.data.[0].signature $rppsignature
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of $rsigrppfile"
        cat $rsigrppfile
        echo "---------------------------------------------------------"

        echo ""
        echo "Setting argocd wave for rsigrpp"
        echo "---------------------------------------------------------"
        cat $rsigrppfile | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-3"' | yq r - --prettyPrint >> copy-rsig-rpp-merged.yaml
        mv copy-rsig-rpp-merged.yaml $rsigrppfile        

        rsigrppspec=$(cat $rsigrppfile | yq r - -j | jq -r '.spec' | $base)
        echo $rsigrppspec > temp-rsig-rpp.yaml
        tmp-rsig-rpp-file=$(find . -name temp-rsig-rpp.yaml)
        rsigrppsignature=$(gpg -u $signer --detach-sign --armor --output - $tmp-rsig-rpp-file | $base )

        if [ -f $tmp-rsig-rpp-file ]; then
            rm $tmp-rsig-rpp-file
        fi

        if [ -f $rppsignfile ]; then
           rm $rppsignfile
        fi

        rsigrppname="rsig-$(yq r -d0 $rppfile metadata.name)"
        yq w -i $rsigrppfile metadata.annotations.signature $rsigrppsignature
        yq w -i $rsigrppfile metadata.annotations.messageScope spec
        yq w -i $rsigrppfile metadata.name $rsigrppname
       
        echo ""
        echo "---------------------------------------------------------"
        echo "Content of ResourceSignature for rpp"
        cat  $rsigrppfile
        echo "---------------------------------------------------------"
        echo "" 
 
        echo ""
        echo "---------------------------------------------------------"
        echo "Adding rsig-rpp to kustomization.yaml"
        if [[ " ${resources[*]} " == *"rsig-rpp-merged.yaml"* ]]; then
             echo "rsig-rpp-merged.yaml is found"
        else
             yq w -i  kustomization.yaml 'resources.[+]' "rsig-rpp-merged.yaml"
        fi
        ecoh done

        echo ""
        echo "Completed generating rsig for rpp"
        echo ""
        echo ""
        echo "---------------------------------------------------------"
        echo "Generating signature for rsfile"  
        rsfilename="merged.yaml"
        rsfile=$(find . -name "$rsfilename")
        echo "rsfile $rsfile"

        msg=`cat $rsfile | $base`
        echo msg
        echo $msg
        echo ""
  
        rsfilebasename=$(basename -- "$rsfile")
        echo "rsfilebasename: $rsfilebasename"

        rsigfile="rsig-$rsfilebasename"

        if [ -f $rsigfile ]; then
           rm $rsigfile
        fi

        echo -e $tmprsig | yq r - --prettyPrint >> $rsigfile

        signfile="$rsfilebasename.sign"
        signature=$( gpg -u $signer --detach-sign --armor --output - $rsfile | $base )               
        echo signature: $signature
        echo $signature >> $signfile
        echo done
 
        echo ""
        echo "---------------------------------------------------------" 
        echo "Setting up rsig"
        yq w -i $rsigfile spec.data.[0].message $msg
        yq w -i $rsigfile spec.data.[0].signature $signature
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of $rsigfile"
        cat $rsigfile
        echo "---------------------------------------------------------"
             
        echo ""
        echo "Setting argocd wave"
        echo "---------------------------------------------------------"

        cat $rsigfile | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-1"' | yq r - --prettyPrint >> copy-rsig-merged.yaml
        mv copy-rsig-merged.yaml $rsigfile
 
        rsigspec=$(cat $rsigfile | yq r - -j | jq -r '.spec' | $base)
        echo $rsigspec > temp-rsig.yaml
        tmp-rsig-file=$(find . -name temp-rsig.yaml)  
        rsigsignature=$(gpg -u $signer --detach-sign --armor --output - $tmp-rsig-file | $base )

        if [ -f $tmp-rsig-file ]; then
            rm $tmp-rsig-file
        fi

        if [ -f $signfile ]; then
           rm $signfile
        fi

        rsigname="rsig-$(yq r -d0 $rsfile metadata.name)"
        yq w -i $rsigfile metadata.annotations.signature $rsigsignature
        yq w -i $rsigfile metadata.annotations.messageScope spec
        yq w -i $rsigfile metadata.name $rsigname

        echo ""
        echo "---------------------------------------------------------" 
        echo "Content of ResourceSignature"
        cat  $rsigfile
        echo "---------------------------------------------------------" 
        echo ""

        
        echo ""
        echo "---------------------------------------------------------"
        echo "Completed signing artifacts"

        echo ""
        echo "---------------------------------------------------------"
        echo "Adding rpp, rsig to kustomization.yaml" 

        yq w -i  kustomization.yaml 'resources.[+]' "rsig-merged.yaml"
        yq w -i  kustomization.yaml 'resources.[+]' "rpp-merged.yaml"

        echo ""
        echo "---------------------------------------------------------"
        echo content of kustomization.yaml
        cat  kustomization.yaml
        echo ""

        cat rpp-merged.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-2"' | yq r - --prettyPrint >> copy-rpp-merged.yaml
        mv copy-rpp-merged.yaml rpp-merged.yaml

    - name: push-generated-resources
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash

        echo ""
        echo "---------------------------------------------------------"
        echo "Commit the changes to namespace labels"
        pwd
        ls
 
        git config --global credential.helper store
        git config --global user.email "gajan@jp.ibm.com"
        git config --global user.name "gajan@jp.ibm.com"                     
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"    
        git config --get remote.origin.fetch 

        git remote set-url origin "https://bd5db0f84d8dcec58d72716cd489f36d53cc54dd@github.com/gajananan/reverse-words-cicd.git"

        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
 
        echo ""
        echo "---------------------------------------------------------" 
        echo "Pushing the generated resource to pre-stage branch"
        git add namespace.yaml
        git add kustomization.yaml
        git add rsig-rpp-merged.yaml
        git add rpp-merged.yaml
        git add rsig-merged.yaml
        git commit -m "Adding generated resource protection profile and resources signature" 
        git push origin pre-stage &> /dev/null
        echo "done"

        echo ""
        echo "---------------------------------------------------------"
        echo "Pushing changes from pre-stage to stage branch"
        git fetch origin/"$(params.pre-stage-branch)" &> /dev/null 
        git checkout stage
        git merge origin/"$(params.pre-stage-branch)" &> /dev/null 
        git push origin stage
        echo "done"

