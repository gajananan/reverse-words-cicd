apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ie-artifact-signing-task
spec:
  inputs:
    resources:
    - name: cicd
      type: git
    params:
    - name: source-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: dest-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: signer-email
      type: string 
      description:  email of the artifacts signer 
    - name: git-repo-url
      type: string
      description:  git repo url "e.g. https://github.com/gajananan/logdna"
    - name: git-repo-user-email
      type: string
    - name: git-repo-user-name
      type: string
    - name: ignore-attrs
      type: string 
  volumes:
    - name: secring-secret-volume
      secret:
        secretName: pipeline-keyring-secret
    - name: prestage
      emptyDir: {}
  steps:
    - name: clone-staging-release
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash 
        mergedrscfile="merged.yaml"
        rspfile="rsp.yaml"
        copyrspfile="copy-rsp.yaml"
        rsfile="rs.yaml"

        echo ""
        echo "---------------------------------------------------------"
        echo "Checkout artifacts $(params.source-branch) branch"
        git fetch
        git checkout $(params.source-branch)
        git pull origin $(params.source-branch)
        echo ""
        echo "---------------------------------------------------------"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Check updated image name"
        cat deployment.yaml | yq r - -j | jq -r '.spec.template.spec.containers' | jq -r '.[].image'
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Create $(params.dest-branch) or checkout artifacts $(params.dest-branch) branch"
        dest_branch_exist=$(git ls-remote origin $(params.dest-branch))
        if [ -z $dest_branch_exist ]; then
           git checkout -b $(params.dest-branch)
        else
           git checkout $(params.dest-branch)
        fi
        git merge $(params.source-branch)
        echo ""
        echo "---------------------------------------------------------"
        echo "Check Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Check content of kustomization.yaml"
        cat kustomization.yaml
        echo done

        echo ""
        echo "---------------------------------------------------------"  
        echo "Remove IShield resources from  kustomization.yaml "
        yq d -i kustomization.yaml "resources.[$rspfile]"
        yq d -i kustomization.yaml "resources.[$rsfile]"
        echo ""
        echo done
        echo ""
        echo "---------------------------------------------------------"
        echo "Compose using kustomize after removing IShield resources"
        kustomize build  > $mergedrscfile
        echo ""
        echo "Content of $mergedrscfile"
        cat $mergedrscfile
        echo ""
        echo "done"

        echo ""
        echo "---------------------------------------------------------"
        echo "Add argocd wave annotation"
        cat namespace.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-4"' | yq r - --prettyPrint >> copy-namespace.yaml
        mv copy-namespace.yaml namespace.yaml
        cat namespace.yaml
        echo done               

        echo ""
        echo "---------------------------------------------------------"
        echo "Remove previous IShield resources"
        if [ -f $rspfile ]; then
           rm $rspfile
        fi
        if [ -f $rsfile ]; then
           rm $rsfile
        fi 
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Generate RSP <script> <inputfile> <IGNORE_ATTR>"
        echo ignore-attrs: $(params.ignore-attrs)
        /generate_rsp.sh $mergedrscfile $rspfile $(params.ignore-attrs)
        echo ""
        echo done
        echo ""
        echo "---------------------------------------------------------"
        echo "Check generated RSP"
        cat  $rspfile
        echo "---------------------------------------------------------" 
        echo "done"  

        echo ""
        echo "Set argocd wave annotation for $rspfile"
        echo "---------------------------------------------------------"
        cat $rspfile | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-3"' | yq r - --prettyPrint >> $copyrspfile
        mv $copyrspfile $rspfile
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of kustomization.yaml"
        yq w -i  kustomization.yaml 'resources.[+]' "$rspfile"
        cat  kustomization.yaml
        echo ""
        echo done

    - name: sign-artifacts
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /secrets/
          name: secring-secret-volume
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash

        mergedrscfile="merged.yaml"
        mergedrsigrscfile="rsig-merged.yaml"
        rsfile="rs.yaml"
        echo ""
        echo "---------------------------------------------------------"
        echo "Retrive keyring-secret"       
        cat /secrets/secring.gpg > /tmp/tmp-secring.gpg
        echo "---------------------------------------------------------"
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Prepare GPG keys"
        echo ""
        echo "Import keys"
        gpg --import /tmp/tmp-secring.gpg

        echo ""
        echo "List secret keys"
        gpg --list-secret-keys

        echo ""
        echo "List keys"
        gpg --list-keys

        echo "---------------------------------------------------------"
        echo done
        
        echo ""
        echo "---------------------------------------------------------"        
        echo "Signer"
        signer=$(params.signer-email)
        echo signer: $signer        
        echo ""
        echo done
  
        echo ""
        echo "---------------------------------------------------------"
        echo "Generated ResourceSignature"
        if [ -f  $mergedrscfile ]; then
           echo ""
           echo "Content of $mergedrscfile"
           cat $mergedrscfile
           echo ""
           /gpg-rs-sign.sh $signer $mergedrscfile $mergedrsigrscfile
        else
           exit 1
        fi
        echo ""
        echo done

        /generate-combined.rs.sh $mergedrscfile $mergedrsigrscfile $rsfile

        yq w -i -d'*' $rsfile 'metadata.annotations."argocd.argoproj.io/sync-wave"' -- "-2"
    
        echo ""
        echo "---------------------------------------------------------"
        echo "Content of kustomization.yaml"
        yq w -i  kustomization.yaml 'resources.[+]' "$rsfile"
        cat  kustomization.yaml
        echo ""
        echo done

    - name: push-generated-resources
      image: quay.io/gajananan/gitops-sign-artifact:rc1
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash
        rspfile="rsp.yaml"
        rsfile="rs.yaml"

        echo ""
        echo "---------------------------------------------------------"
        echo "Configure Git Repo"
        pwd
        ls
 
        git config --global credential.helper store
        git config --global user.email $(params.git-repo-user-email)
        git config --global user.name $(params.git-repo-user-name)
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"    
        git config --get remote.origin.fetch 

        repourl=$(params.git-repo-url) 
        echo repourl: $repourl
        repourlwithtoken=$(echo $repourl | sed "s|github|$AUTH_TOKEN@github|g").git
        git remote set-url origin  "$repourlwithtoken"
        git fetch

        echo ""
        echo "---------------------------------------------------------"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        git status
        echo ""
        echo done

        echo ""
        echo "---------------------------------------------------------" 
        echo "Push the generated resource to stage-plus branch"
        git add namespace.yaml
        git add kustomization.yaml
        git add $rspfile
        git add $rsfile

        git commit -m "Add generated resource protection profile and resources signature"
        #git push origin $(git rev-parse --abbrev-ref HEAD) &> /dev/null
        git push origin $(params.dest-branch)
        echo "done"

 
        #echo ""
        #echo "---------------------------------------------------------"
        #echo "Push changes from "$(params.source-branch)" to "$(params.dest-branch)" branch"
        #git push origin --delete "$(params.dest-branch)"
        #echo ""
        #git checkout -b "$(params.dest-branch)"
        #echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        #git status
        #echo ""
        #git push origin "$(params.dest-branch)"
        #echo "done"
      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: image-updater-secret
              key: token
