apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ie-artifact-signing-task
spec:
  inputs:
    resources:
    - name: cicd
      type: git
    params:
    - name: source-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: dest-branch
      type: string
      description: Branch for stage environment on the git repository
    - name: signer-email
      type: string 
      description:  email of the artifacts signer 
  volumes:
    - name: kubeconfig-secret-volume
      secret:
        secretName: ie-kubeconfig-secret
    - name: secring-secret-volume
      secret:
        secretName: pipeline-keyring-secret
    - name: prestage
      emptyDir: {}
  steps:
    - name: clone-staging-release
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash
       

        
        echo ""
        echo "---------------------------------------------------------"
        echo "Clone cicd pre-stage branch"  
        git fetch
        git checkout $(params.source-branch)
        git pull --allow-unrelated-histories
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        pwd
        ls
        echo ""
        echo "checking update image name"
        cat deployment.yaml | yq r - -j | jq -r '.spec.template.spec.containers' | jq -r '.[].image'
        echo done
  
        echo "---------------------------------------------------------"  
        echo "Removing IE resources from  kustomization.yaml "        
        echo "Before"
        cat kustomization.yaml
        echo ""
        yq d -i kustomization.yaml 'resources.[rsig-rpp-merged.yaml]'
        yq d -i kustomization.yaml 'resources.[rsig-merged.yaml]'
        yq d -i kustomization.yaml 'resources.[rpp-merged.yaml]'
        echo ""
        echo "---------------------------------------------------------"        
        echo "After"
        cat kustomization.yaml
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Add label to namespace"
        yq w -i namespace.yaml 'metadata.labels.integrity-enforced' --tag '!!str' true
        echo ""
        echo "Adding argocd wave annotation"
        cat namespace.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-4"' | yq r - --prettyPrint >> copy-namespace.yaml
        mv copy-namespace.yaml namespace.yaml
        cat namespace.yaml
        echo done 
               
        echo ""
        echo "---------------------------------------------------------"
        echo "Compose using kustomize"
        kustomize build  > merged.yaml
        echo "Content of merged.yaml"
        cat merged.yaml
        echo ".........................................................."
        echo "done"
        
        echo ""
        echo "---------------------------------------------------------"
        echo "removing old rpp"
        if [ -f rpp-merged.yaml ]; then
           rm rpp-merged.yaml
        fi
        echo done

        echo ""
        echo "---------------------------------------------------------"
        echo "Generating RPP <script> <input_file> <output_file>"
        /generate_rpp.sh merged.yaml rpp-merged.yaml

        echo "" 
        cat rpp-merged.yaml
        echo "---------------------------------------------------------" 
        echo "done"  

    - name: sign-artifacts
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /config/
          name: kubeconfig-secret-volume
        - mountPath: /secrets/
          name: secring-secret-volume
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash
        
        
        echo ""
        echo "---------------------------------------------------------"
        echo "Retriving keyring-secret ..."
        
        cat /secrets/secring.gpg > /tmp/tmp-secring.gpg

        echo ""
        echo "---------------------------------------------------------"
        echo "importing keys"
        gpg --import /tmp/tmp-secring.gpg         

        echo ""
        echo "Listing secret keys"
        gpg --list-secret-keys

        echo ""
        echo "Listing keys"
        gpg --list-keys

        
        signer=$(params.signer-email)
        echo signer: $signer

        echo ""
        echo "---------------------------------------------------------"
        echo "Generating signature for rpp"
        rppfilename="rpp-merged.yaml"
        rppfile=$(find . -name "$rppfilename")
        

        rppfilebasename=$(basename -- "$rppfile")
        echo "rsfilebasename: $rppfilebasename"

        rsigrppfilename="rsig-$rppfilebasename"
 
        if [ -f $rsigrppfilename ]; then
           rm $rsigrppfilename
        fi        

        /gpg-rs-sign.sh $signer $rppfile $rsigrppfilename


        echo ""
        echo "Setting argocd wave for rsigrpp"
        echo "---------------------------------------------------------"
        cat $rsigrppfilename | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-3"' | yq r - --prettyPrint >> copy-rsig-rpp-merged.yaml
        mv copy-rsig-rpp-merged.yaml $rsigrppfilename

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of ResourceSignature for rpp"
        cat  $rsigrppfilename
        echo "---------------------------------------------------------"
        echo "" 
 
        echo ""
        echo "---------------------------------------------------------"
        echo "Adding rsig-rpp to kustomization.yaml"
        if [[ " ${resources[*]} " == *"rsig-rpp-merged.yaml"* ]]; then
             echo "rsig-rpp-merged.yaml is found"
        else
             yq w -i  kustomization.yaml 'resources.[+]' "rsig-rpp-merged.yaml"
        fi
        echo done

        echo ""
        echo "Completed generating rsig for rpp"
        echo ""

        echo ""
        echo "---------------------------------------------------------"
        echo "Generating signature for rsfile"  
        rsfilename="merged.yaml"
        rsfile=$(find . -name "$rsfilename")
        echo "rsfile $rsfile"

        rsfilebasename=$(basename -- "$rsfile")
        echo "rsfilebasename: $rsfilebasename"
        rsigfilename="rsig-$rsfilebasename"
        
        if [ -f $rsigfilename ]; then
           rm $rsigfilename
        fi

        /gpg-rs-sign.sh $signer $rsfile $rsigfilename

        echo ""
        echo "---------------------------------------------------------"
        echo "Content of $rsigfilename"
        cat $rsigfilename
        echo "---------------------------------------------------------"
             
        echo ""
        echo "---------------------------------------------------------"
        echo "Setting argocd wave"

        cat $rsigfilename | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-1"' | yq r - --prettyPrint >> copy-rsig-merged.yaml
        mv copy-rsig-merged.yaml $rsigfilename
 
        echo ""
        echo "---------------------------------------------------------" 
        echo "Content of ResourceSignature"
        cat  $rsigfilename
        echo "---------------------------------------------------------" 
        echo ""

        
        echo ""
        echo "---------------------------------------------------------"
        echo "Completed signing artifacts"

        echo ""
        echo "---------------------------------------------------------"
        echo "Adding rpp, rsig to kustomization.yaml" 

        yq w -i  kustomization.yaml 'resources.[+]' "rsig-merged.yaml"
        yq w -i  kustomization.yaml 'resources.[+]' "rpp-merged.yaml"

        echo ""
        echo "---------------------------------------------------------"
        echo content of kustomization.yaml
        cat  kustomization.yaml
        echo ""

        cat rpp-merged.yaml | yq r - -j | jq -r '.metadata.annotations."argocd.argoproj.io/sync-wave"="-2"' | yq r - --prettyPrint >> copy-rpp-merged.yaml
        mv copy-rpp-merged.yaml rpp-merged.yaml

        if [ -f temp-aaa.yaml ]; then
           rm temp-aaa.yaml
        fi
        if [ -f temp-rsig.yaml ]; then
           rm temp-rsig.yaml
        fi

        if [ -f merged.yaml ]; then
           rm merged.yaml
        fi
    - name: push-generated-resources
      image: us.icr.io/mutation-advisor/gitops-sign-artifact:rc1
      workingdir: /workspace/cicd
      script: |
        #!/bin/bash


        echo ""
        echo "---------------------------------------------------------"
        echo "Configure Git Repo"
        pwd
        ls
 
        git config --global credential.helper store
        git config --global user.email "gajan@jp.ibm.com"
        git config --global user.name "gajan@jp.ibm.com"                     
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"    
        git config --get remote.origin.fetch 

        git remote set-url origin "https://$AUTH_TOKEN@github.com/gajananan/reverse-words-cicd.git"
        git fetch
        echo ""
        echo "---------------------------------------------------------"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        echo ""
        git status
        echo done

        echo ""
        echo "---------------------------------------------------------" 
        echo "Pushing the generated resource to pre-stage branch"
        git add namespace.yaml
        git add kustomization.yaml
        git add rsig-rpp-merged.yaml
        git add rpp-merged.yaml
        git add rsig-merged.yaml
        git commit -m "Adding generated resource protection profile and resources signature" 
        git push origin $(git rev-parse --abbrev-ref HEAD) &> /dev/null
        echo "done"

 
        echo ""
        echo "---------------------------------------------------------"
        echo "Pushing changes from "$(params.source-branch)" to "$(params.dest-branch)" branch"
        git push -d origin "$(params.dest-branch)"
        echo ""
        git checkout -b "$(params.dest-branch)"
        echo "Current git branch: $(git rev-parse --abbrev-ref HEAD)"
        git status  
        echo ""
        git push origin "$(params.dest-branch)"
        echo "done"

      env:
        - name: AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: image-updater-secret
              key: token
