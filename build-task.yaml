apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-from-dockerfile
spec:
  inputs:
    resources:
    - name: source
      type: git
    params:
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: DOCKERFILE_PATH
      description: Path to the Dockerfile file
      default: ./Dockerfile
    - name: IMAGE_TAG
      description: Tag for the built image
      default: latest
    - name: signer-email
      type: string
      description:  email of the artifacts signer
  outputs:
    resources:
    - name: image
      type: image
  steps:
  - name: build
    image: quay.io/buildah/stable
    workingdir: /workspace/source
    command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', '$(inputs.params.DOCKERFILE_PATH)', '-t', '$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)', '.']
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true

  - name: push
    image: quay.io/buildah/stable
    #command: ['buildah', 'push', '--sign-by==$(inputs.params.signer-email)' , '--creds=$AUTH_TOKEN' ,'--storage-driver=vfs', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)', 'docker://$(outputs.resources.image.url):$(inputs.params.IMAGE_TAG)']
    command: ["/bin/sh"]
    args:
      - -c
      - >-
           cat /secrets/secring.gpg > /tmp/tmp-secring.gpg &&
           gpg --import /tmp/tmp-secring.gpg &&
           gpg --list-secret-keys &&
           gpg --list-keys &&
           echo SIGNER_EMAIL: ${SIGNER_EMAIL} &&
           echo TLSVERIFY: ${TLSVERIFY} &&
           echo IMAGE_URL: ${IMAGE_URL} &&
           echo IMAGE_TAG: ${IMAGE_TAG} &&
           echo OUT_IMAGE_URL: ${OUT_IMAGE_URL} &&
           buildah push --sign-by=${SIGNER_EMAIL} --creds=${AUTH_TOKEN} --storage-driver=vfs --tls-verify=${TLSVERIFY} ${IMAGE_URL}:${IMAGE_TAG} docker://${OUT_IMAGE_URL}:${IMAGE_TAG}

    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    - name: secring-secret-volume
      mountPath: /secrets/
    securityContext:
      privileged: true
    env:
      - name: SIGNER_EMAIL
        value: $(inputs.params.signer-email)
      - name: TLSVERIFY
        value: $(inputs.params.TLSVERIFY)
      - name: IMAGE_URL
        value: $(outputs.resources.image.url)
      - name: IMAGE_TAG
        value: $(inputs.params.IMAGE_TAG)
      - name: OUT_IMAGE_URL
        value: $(outputs.resources.image.url)
      - name: AUTH_TOKEN
        valueFrom:
           secretKeyRef:
             name: ibmcloud-token-secret
             key: token
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: secring-secret-volume
    secret:
        secretName: pipeline-keyring-secret
